



alias als='alias'



# cluster alias
alias moddir='cd /isilon/Apps/site_sw/prd/RHEL7.1_x86_64'
alias modavail='module avail'
alias dd1='cd /isilon/Analysis/onco/v2_analyses/hg38_noALT_withDecoy/P2_bg/snvs/P2-SNV-test/work/57/49c47bfa16cc4cd6a8571bd7a7\
4e64'
alias dd2='cd /isilon/Analysis/onco/v2_analyses/hg38_noALT_withDecoy/P2_bg/snvs/P2-SNV-test/work/07/85324fc5fe891a2ee86c0f803f\
e02f'
alias freqp='cd /isilon/Analysis/onco/v2_analyses/hg38_noALT_withDecoy/P2_bg/snvs/P2-SNV-test/work/b3/a4dc75c9d0884fc8c7ede56b\
8b1342/re-run'
alias bpi='cd /isilon/Data/onco/onco-ngs-utils/head/bg-polishing/inputs'
alias dot='cd ~/bin/dotfiles'
alias home='cd ~'

function modload(){
   module load "$1"
}

# list all function declarations
alias funcl='declare -F'

# cd to java dir
function cdjava(){
   OUTPUT="$(find `pwd` -name "*.java" | grep "$1" | head -1)"
   echo `dirname $OUTPUT`
   cd `dirname $OUTPUT`
}

# open another eclipse
function oeclipse(){
   /Applications/Eclipse.app/Contents/MacOS/eclipse -clean &

}

# del to trash
function trash {
   mv "$@" ~/.Trash; 
}

# put screenshots in dir
function snap(){
   mkdir -p "$1"
   defaults write com.apple.screencapture location -string "$1"
   killall SystemUIServer
}

# Finder: show path bar
function pathbar(){
   defaults write com.apple.finder ShowPathbar -bool true
}

function posixp(){
   defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
}

# show func definition
function funcd(){
   type "$1"
}

# ssh
function pbms(){
   ssh -lrothr11 "$1"
}

# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}






# Utility
alias reload='source ~/bin/dotfiles/bash/aliases'
alias ea='emacs ~/bin/dotfiles/bash/aliases && reload'
alias ee='emacs ~/bin/dotfiles/bash/env'

# Quicker cd
#alias cg='cd /Library/Ruby/Gems/1.8/gems/'
#function cr() {
# cd ~/repos/$*
#}

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() { 
    cd $1; ls 
}
alias cls='clear; ls'
alias h='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias ltr='ls -ltr' # sort with recently modified last
alias md='mkdir -p'
alias s='cd ..'   # up one dir

alias cga='compgen -A alias' # function, alias
alias cgf='compgen -A function' # function, alias

function take() { 
    mkdir -p "$1"
    cd "$1" 
}


alias e='exit'
alias k9="killall -9"
function killnamed () { 
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}
function zipr() {
  zip -r $1.zip $1
}

# Finder
alias o='open . &'
alias sf='open -a safari'

alias tu='top -o cpu' #cpu
alias tm='top -o vsize' #cpu

alias g="git status"

# Git
alias gaa="git add -u"
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# Commit pending changes and quote all args as message
function gg() { 
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='mate .git/config'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# Text editing
# Emacs
alias em="emacs"
alias emm="emacs ."
# Regenerate TAGS file from file arguments
function ct() {
  rm -f TAGS
  etags --append --output=TAGS $*
}

# Setup a tunnel
function haproxyssh() { 
  ssh -L7997:127.0.0.1:7997 deploy@$1.com 
}

# Syntax check Javascript
function jsc() { 
  jsl -conf /etc/jsl/jsl.conf -process $1 
}

function aiff2mp3() { 
  lame -h -V 0 $1.aif $1.mp3 
}
function wav2mp3() { 
  lame -h -V 0 $1.wav $1.mp3 
}


# XCode
# Analyze release build
alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
function sxx() { 
  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $* 
}

alias ox="open *.xcodeproj"

# Nginx
function nginx_stop() {
    ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
}
function nginx_start() {
    sudo /opt/nginx/sbin/nginx
}

# TaskPaper
function new-tp() {
    touch $1.taskpaper
    open $1.taskpaper
}


# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

